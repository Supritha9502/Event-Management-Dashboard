from flask import Flask, jsonify, request

app = Flask(_name_)

# Mock Database
events = []
attendees = []
tasks = []

# Event Management Endpoints
@app.route('/events', methods=['GET'])
def get_events():
    return jsonify(events)

@app.route('/events', methods=['POST'])
def create_event():
    data = request.json
    if not all(key in data for key in ("name", "description", "location", "date")):
        return jsonify({"error": "Missing fields"}), 400
    data['id'] = len(events) + 1
    data['attendees'] = []
    events.append(data)
    return jsonify(data), 201

@app.route('/events/<int:event_id>', methods=['PUT'])
def update_event(event_id):
    data = request.json
    event = next((e for e in events if e['id'] == event_id), None)
    if not event:
        return jsonify({"error": "Event not found"}), 404
    event.update(data)
    return jsonify(event)

@app.route('/events/<int:event_id>', methods=['DELETE'])
def delete_event(event_id):
    global events
    events = [e for e in events if e['id'] != event_id]
    return jsonify({"message": "Event deleted"})

# Attendee Management Endpoints
@app.route('/attendees', methods=['GET'])
def get_attendees():
    return jsonify(attendees)

@app.route('/attendees', methods=['POST'])
def add_attendee():
    data = request.json
    if not data.get("name"):
        return jsonify({"error": "Missing name"}), 400
    data['id'] = len(attendees) + 1
    attendees.append(data)
    return jsonify(data), 201

@app.route('/attendees/<int:attendee_id>', methods=['DELETE'])
def delete_attendee(attendee_id):
    global attendees
    attendees = [a for a in attendees if a['id'] != attendee_id]
    return jsonify({"message": "Attendee deleted"})

# Task Management Endpoints
@app.route('/tasks', methods=['POST'])
def create_task():
    data = request.json
    if not all(key in data for key in ("name", "deadline", "status", "attendee_id", "event_id")):
        return jsonify({"error": "Missing fields"}), 400
    data['id'] = len(tasks) + 1
    tasks.append(data)
    return jsonify(data), 201

@app.route('/tasks/<int:event_id>', methods=['GET'])
def get_tasks(event_id):
    event_tasks = [t for t in tasks if t['event_id'] == event_id]
    return jsonify(event_tasks)

@app.route('/tasks/<int:task_id>', methods=['PUT'])
def update_task_status(task_id):
    data = request.json
    task = next((t for t in tasks if t['id'] == task_id), None)
    if not task:
        return jsonify({"error": "Task not found"}), 404
    task.update(data)
    return jsonify(task)

if _name_ == '_main_':
    app.run(debug=True)